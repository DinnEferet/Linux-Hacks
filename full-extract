#!/bin/bash

# @name         full-extract

# @author       Dinn Eferet

# @description  A handy but potentially VERY DANGEROUS tool, which recurrsively
#               extracts every archive file in the current working directory
#               (including files in subfolders), and redundantly moves every
#               file it finds in the directory (including files in subfolders)
#               to the directory. It was inspired by my frustration with having
#               to repeatedly extract files out of archives I downloaded in
#               bulk. Use with care! I repeat, use with care!!!


# fancy
clear

# fancy
echo "---------------------------------------------------------------------"
echo "full-extract"
echo "---------------------------------------------------------------------"
echo "Author: Dinn Eferet"
echo "Repo: https://github.com/DinnEferet/linux-life-hacks"
echo "---------------------------------------------------------------------"
echo "Current User: "
echo "$(echo ${USER})"
echo ""
echo "Current Folder:"
echo "$(echo ${PWD})"
echo "---------------------------------------------------------------------"
echo "This tool requires that dtrx (a universal file extraction tool) be"
echo "installed on your machine. If you do not have dtrx installed,"
echo "turn on your internet, and full-extract will attempt to install"
echo "it from its apt repository in the background."
echo "---------------------------------------------------------------------"

# fancy
sleep 1

echo ""

# so user knows not to be an idiot
echo "WARNING!!!"

echo ""

echo "**This tool is potentially VERY DANGEROUS!!! It will recurrsively"
echo "extract all the archive files in this folder (including files in"
echo "subfolders), and redundantly move all the files it finds in this"
echo "folder (including files in subfolders) to this folder! If you do"
echo "not want this to happen, or if this folder is anywhere near your"
echo "/root or /home folder, PRESS CTRL-C RIGHT NOW and move your"
echo "archive files to a safer folder (e.g. ~/Desktop/my_archives)!"
echo "Then open that folder in your Terminal and run full-extract again."

echo ""

echo "**You are responsible for any errors that may result from invalid"
echo "inputs, so please be careful. You are also responsible for any"
echo "errors that may result from corrupted or missing archives, duplicate"
echo "files or system bugs. However, any error messages about file"
echo "deletion or movement can be safely ignored."

echo ""

echo "---------------------------------------------------------------------"

echo ""

# fancy
read -p "Press ENTER to continue, or CTRL-C to exit. "

echo ""

echo "---------------------------------------------------------------------"
read -p "Enter archive type (e.g. rar, zip, gz): " archive
echo "---------------------------------------------------------------------"

# stop script if no archive extension given
if [[ $archive == "" ]]
then
	echo "---------------------------------------------------------------------"
	echo "No input given for archive type! Can't continue."
	echo "---------------------------------------------------------------------"
	exit 0
fi

# in case user decides to be an idiot anyway
subdircount=`find . -maxdepth 1 -type d | wc -l`

# check if there are any subfolders in current directory
if [ $subdircount -gt 1 ]
then
	echo "---------------------------------------------------------------------"
	echo "WARNING!!!"

	echo ""

	echo "Subfolder(s) detected in"
	echo "'$(echo ${PWD##*/})'!"

	echo ""

	read -p "Continue anyway? (y/n): " continue
	echo "---------------------------------------------------------------------"

  # continue or not?
	if [ $continue = "y" ]
	then
		: # carry on with script
	elif [ $continue = "n" ]
	then
		echo "---------------------------------------------------------------------"
		echo "Bye."
		echo "---------------------------------------------------------------------"
		exit 0
	else
		echo "---------------------------------------------------------------------"
		echo "Invalid input! Can't continue."
		echo "---------------------------------------------------------------------"
		exit 0
	fi
fi

# check if user wants to get rid of archives after
echo "---------------------------------------------------------------------"
read -p "Delete archive files after extraction? (y/n): " delete_archs
echo "---------------------------------------------------------------------"

if [ $delete_archs = "y" ]
then
	delete_archs_flag="true"
elif [ $delete_archs = "n" ]
then
	delete_archs_flag="false"
else
	echo "---------------------------------------------------------------------"
	echo "Invalid input! Option ignored."
	echo "---------------------------------------------------------------------"

	sleep 1
fi

# check if user wants to get rid of empty folders after
echo "---------------------------------------------------------------------"
read -p "Delete empty folders after extraction? (y/n): " delete_dirs
echo "---------------------------------------------------------------------"

if [ $delete_dirs = "y" ]
then
	delete_dirs_flag="true"
elif [ $delete_dirs = "n" ]
then
	delete_dirs_flag="false"
else
	echo "---------------------------------------------------------------------"
	echo "Invalid input! Option ignored."
	echo "---------------------------------------------------------------------"

	sleep 1
fi

# check if user wants to get rid of other files
echo "---------------------------------------------------------------------"
echo "Are there any other file types in this folder you'd like to"
read -p "delete after extraction? (y/n): " delete_others
echo "---------------------------------------------------------------------"

if [ $delete_others = "y" ]
then
	echo "---------------------------------------------------------------------"
	echo "Enter the extension(s) of the file(s) you want to delete below."
	echo "Separate multiple extensions with a comma (e.g. sh, txt, doc):"
	echo ""
	read victims_list
	echo "---------------------------------------------------------------------"

	delete_others_flag="true"

	victims_array=($(echo "$victims_list" | tr ', ' '\n'))

elif [ $delete_others = "n" ]
then
	delete_others_flag="false"
else
	echo "---------------------------------------------------------------------"
	echo "Invalid input! Option ignored."
	echo "---------------------------------------------------------------------"

	sleep 1
fi


# check if user has 'dtrx' installed
if command -v dtrx > /dev/null 2>&1 # '> /dev/null 2>&1' omits command output
then
	find . -name "*.$archive" -exec dtrx {} \;
else
	echo "---------------------------------------------------------------------"
  echo "Looks like you don't have dtrx installed!"
  echo "---------------------------------------------------------------------"

  sleep 1

  echo "Attempting to install dtrx (may require your sudo password)..."

  sleep 1

	echo "---------------------------------------------------------------------"

  sudo apt install dtrx -y > /dev/null 2>&1

  if command -v dtrx > /dev/null 2>&1
  then
    echo "---------------------------------------------------------------------"
    echo "dtrx was installed successfully! Continuing..."
    echo "---------------------------------------------------------------------"

    sleep 1

    find . -name "*.$archive" -exec dtrx {} \;
	else
    echo "---------------------------------------------------------------------"
    echo "There was a problem installing dtrx. This tool can't work without"
		echo "it. Please try installing dtrx yourself (using 'sudo apt install"
    echo "dtrx -y'), then run full-extract again."
    echo "---------------------------------------------------------------------"

    exit 0
  fi
fi

# redundantly move all files in current folder to current folder;
# just comment it out if you don't want this in your copy
find . -type f -exec mv {} . \;

# delete archive(s) or not?
if [[ "$delete_archs_flag" == "true" ]]
then
	find . -name "*.$archive" -exec rm {} \;
fi

# delete empty folder(s) or not?
if [[ "$delete_dirs_flag" == "true" ]]
then
	find . -type d -exec rm -rf {} \;
fi


# delete other file(s) or not?
if [[ "$delete_others_flag" == "true" ]]
then
	for i in ${victims_array[@]}; do
		find . -name "*.$i" -exec rm {} \;
	done
fi

# fancy
sleep 1

# fancy
echo "---------------------------------------------------------------------"
echo "Done."
echo "---------------------------------------------------------------------"
